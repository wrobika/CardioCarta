@model CardioCarta.Models.Diary

@{
    ViewBag.Title = "Wypełń dzienniczek";
}

<h2>Wypełń dzienniczek</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Mood, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Mood, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mood, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SystolicPressure, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SystolicPressure, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SystolicPressure, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DiastolicPressure, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DiastolicPressure, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DiastolicPressure, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RespirationProblem, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.RespirationProblem)
                    @Html.ValidationMessageFor(model => model.RespirationProblem, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Haemorrhage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Haemorrhage)
                    @Html.ValidationMessageFor(model => model.Haemorrhage, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Dizziness, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Dizziness)
                    @Html.ValidationMessageFor(model => model.Dizziness, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ChestPain, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.ChestPain)
                    @Html.ValidationMessageFor(model => model.ChestPain, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SternumPain, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.SternumPain)
                    @Html.ValidationMessageFor(model => model.SternumPain, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HeartPain, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.HeartPain)
                    @Html.ValidationMessageFor(model => model.HeartPain, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Alcohol, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Alcohol)
                    @Html.ValidationMessageFor(model => model.Alcohol, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Coffee, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Coffee)
                    @Html.ValidationMessageFor(model => model.Coffee, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Other, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Other, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Other, "", new { @class = "text-danger" })
            </div>
        </div>
  
        <div class="form-group">
            @Html.HiddenFor(model => model.Id)

            <strong class = "control-label col-md-2">Określ swoją lokalizację:</strong>
            <div id="map" class="col-md-10"></div>
            <script>
                var defaultPosition = [19.940984, 50.062006];

                var rasterLayer = new ol.layer.Tile({
                    source: new ol.source.OSM()
                });

                var vectorSource = new ol.source.Vector();
                var vectorLayer = new ol.layer.Vector({
                    source: vectorSource
                });

                var style = new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 10,
                        fill: new ol.style.Fill({
                            color: 'red',
                        })
                    }),
                });

                const map = new ol.Map({
                    layers: [rasterLayer, vectorLayer],
                    target: 'map',
                    view: new ol.View({
                        center: ol.proj.fromLonLat(defaultPosition),
                        zoom: 12
                    })
                });

                function setPosition(coords) {
                    const feature = new ol.Feature(
                        new ol.geom.Point(ol.proj.fromLonLat(coords)),
                    );
                    feature.setStyle(style);
                    feature.setId("location");
                    vectorSource.addFeature(feature);
                }

                function getLocation() {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(success, error,
                            { enableHighAccuracy: true });
                    } else {
                        alert("Cannot get Geolocation");
                    }
                }
                function success(location) {
                    setPosition([location.coords.longitude, location.coords.latitude]);
                    document.getElementById("Id").value = location.coords.longitude + " " + location.coords.latitude;
                }
                function error(event) {
                    setPosition(defaultPosition);
                    document.getElementById("Id").value = defaultPosition[0] + " " + defaultPosition[1];
                    alert(event.code + ": " + event.message);
                }
                getLocation()

                map.on('click', function (event) {
                    vectorSource.getFeatureById("location").getGeometry().setCoordinates(event.coordinate);
                    var coords = ol.proj.transform(event.coordinate, 'EPSG:3857', 'EPSG:4326');
                    var latitude = coords[1];
                    var longitude = coords[0];
                    document.getElementById("Id").value = longitude + " " + latitude;
                });
            </script>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Prześlij" class="btn btn-default" />
            </div>
        </div>
    </div>
}
