
@{
    ViewBag.Title = "Mapa";
}
<div id="map" class="map"></div>
<div><img src="~/Content/legend.png" style="width:350px;max-width:100%;max-height:100%;"/></div>
    <script>
        @{
            var mapController = new CardioCarta.Controllers.MapController();
            var diary = mapController.GetDiaries();
            var airly = mapController.GetAirly();
        }

        var diaries = @Html.Raw(Json.Encode(diary));
        var airlies = @Html.Raw(Json.Encode(airly));
        var diaryPoints = Object.keys(diaries);
        var airlyPoints = Object.keys(airlies);
        var wktReader = new ol.format.WKT();
        var diaryFeatures = [];
        var airlyFeatures = [];
        var airlyFeatures2 = [];

        function diaryColor(value) {
            if (value < 5) {
                return 'green';
            }
            if (value < 8) {
                return 'yellow';
            }
            return 'red';
        }

        for (var i = 0; i < diaryPoints.length; i++) {
            var feature = wktReader.readFeature(diaryPoints[i]);
            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
            var value = diaries[diaryPoints[i]];

            feature.setStyle(new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 10,
                    stroke: new ol.style.Stroke({
                        color: '#fff'
                    }),
                    fill: new ol.style.Fill({
                        color: diaryColor(value)
                    })
                })
            }));
            diaryFeatures.push(feature);
        }

        function indexToRGB(i) {
            i /= 100;
            var r = (i <= 1) ? (255 * i * 2) : (255 - 255 * (i - 1));
            var g = (i <= 1) ? (255 - 255 * (i * 2 - 1)) : 0;
            return 'rgb(' + r + ',' + g + ', 0, 0.3)';
        }

        for (var i = 0; i < airlyPoints.length; i++) {
            var feature = wktReader.readFeature(airlyPoints[i]);
            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
            var value = airlies[airlyPoints[i]];
            feature.set('weight', value / 100);

            feature.setStyle(new ol.style.Style(
                {
                    image: new ol.style.Circle({
                        radius: 20,
                        fill: new ol.style.Fill({
                            color: indexToRGB(value)
                        })
                    })
                }));

            airlyFeatures.push(feature);
        }

        for (var i = 0; i < airlyPoints.length; i++) {
            var point = wktReader.readFeature(airlyPoints[i]);
            var feature = new ol.Feature({
                geometry: new ol.geom.Polygon.circular(point.getGeometry().getCoordinates(), 500)
            });
            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
            var value = airlies[airlyPoints[i]];
            feature.set('weight', value / 100);

            feature.setStyle(new ol.style.Style(
                {
                    fill: new ol.style.Fill({
                        color: indexToRGB(value)
                    })
                }));

            airlyFeatures2.push(feature);
        }

        var diarySource = new ol.source.Vector({
            features: diaryFeatures
        });

        var airlySource = new ol.source.Vector({
            features: airlyFeatures2
        });

        var clusterDiary = new ol.source.Cluster({
            distance: 40,
            source: diarySource
        });

        var clusterAirly = new ol.source.Cluster({
            distance: 80,
            source: airlySource
        });

        var clusters = new ol.layer.Vector({
            source: clusterDiary,
            style: function(feature) {
                var size = feature.get('features').length;
                if (size === 1)
                {
                    style = feature.get('features')[0].getStyle();
                }
                else
                {
                    style = new ol.style.Style({
                        image: new ol.style.Circle({
                            radius: 10,
                            stroke: new ol.style.Stroke({
                                color: 'black'
                            }),
                            fill: new ol.style.Fill({
                                color: 'white'
                            })
                        }),
                        text: new ol.style.Text({
                            text: size.toString(),
                            fill: new ol.style.Fill({
                                color: 'black'
                            })
                        })
                    });
                }
                return style;
            }
        });

        var raster = new ol.layer.Tile({
        source: new ol.source.OSM()
        });

        var heatMapLayer = new ol.layer.Heatmap({
            source: airlySource,
            blur: 1,
            radius: 10,
            opacity: 1,
            //weight: function (feature) {
            //    var size = feature.get('features').length;
            //    if (size === 1) {
            //        return feature.get('features')[0].get('weight');
            //    }
            //    else {
            //        var sumWeight = 0;
            //        for (var i = 0; i < size; i++)
            //        {
            //            sumWeight += feature.get('features')[i].get('weight');
            //        }
            //        return sumWeight / size;
            //    }
            //}
            //gradient: ['#0000ff', '#f00', '#f00', '#ff0', '#f00'],
        });

        var airly = new ol.layer.Vector({
            source: clusterAirly,
            style: function (feature) {
                var size = feature.get('features').length;
                if (size === 1) {
                    style = feature.get('features')[0].getStyle();
                }
                else {
                    //var sumWeight = 0;
                    //for (var i = 0; i < size; i++)
                    //{
                    //    sumWeight += feature.get('features')[i].get('weight');
                    //}
                    //var avarage = sumWeight / size;
                    style = new ol.style.Style({
                        image: new ol.style.Circle({
                            radius: 20,
                            fill: new ol.style.Fill({
                                color: numberToColorHsl(feature.get('features')[0].get('weight'))
                            })
                        }),

                        //fill: new ol.style.Fill({
                        //    color: numberToColorHsl(avarage)
                        //})
                    });
                }
                return style;
            }
        });

        var airly2 = new ol.layer.Vector({
            source: airlySource
        });

        var map = new ol.Map({
            layers: [raster, airly2, clusters],
            target: 'map',
            view: new ol.View({
                center: ol.proj.fromLonLat([19.938618, 50.060601]),
                zoom: 12
            })
        });
</script>

