
@{
    ViewBag.Title = "Map";
}
@*<div id="map" class="map"></div>
<script type="text/javascript">

    var osmLayer = new ol.layer.Tile({
        source: new ol.source.OSM()
    });

    var map = new ol.Map({
        layers: [osmLayer, vectorLayer],
        target: 'map',
        view: new ol.View({
            center: [0, 0],
            zoom: 2
        })
    });

    var geometries = ["LINESTRING(1 2 3, 3 4 5)", "LINESTRING(21 22 23, 23 24 25)", "LINESTRING(1 6 13, 30 40 50)"];

    var wktReader = new ol.format.WKT();
            var featureCollection = [];

    for (var i = 0; i < geometries.length; i++)
{
    var feature = wktReader.readFeature(geometries[i]);
            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
    if (feature.getGeometry().getType() == 'Polygon')
    {
        feature.setStyle(new ol.style.Style(
        {
            stroke: new ol.style.Stroke(
            {
                color: 'blue',
                width: 3
            }),
            fill: new ol.style.Fill(
            {
                color: 'rgba(0, 0, 255, 0.1)'
            })
        }));
        featureCollection.push(feature);
    }
    else if (feature.getGeometry().getType() == 'LineString')
    {
        feature.setStyle(new ol.style.Style(
        {
            stroke: new ol.style.Stroke(
            {
                color: 'red',
                width: 3
            })
        }));
        featureCollection.push(feature);
    }
    @*else if (feature.getGeometry().getType() == 'Point')
    {
        feature.setStyle(new ol.style.Style(
        {
            image: new ol.style.Icon( /** @type {olx.style.IconOptions} */ (
            {
                anchor: [0.5, 46],
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                opacity: 0.75,
                src: 'Icons/marker.png'
            }))
        }));
        featureCollection.push(feature);
    }

    transform('EPSG:4326', 'EPSG:3857');

    var source = new ol.source.Vector({
        features: featureCollection
    });

    var vectorLayer = new ol.layer.Vector({
        source: source
    });
}
</script>*@




<div id="map" class="map"></div>
    <form>
      <label>cluster distance</label>
      <input id="distance" type="range" min="0" max="100" step="1" value="40"/>
    </form>
    <script>
      var distance = document.getElementById('distance');
      var count = 20000;
      var features = new Array(count);
      for (var i = 0; i < count; ++i) {
        var coordinates = [19 + Math.random(), 50 + Math.random()];
        features[i] = new ol.Feature(new ol.geom.Point(coordinates));
        features[i].getGeometry().transform('EPSG:4326', 'EPSG:3857');
      }

      var source = new ol.source.Vector({
        features: features
      });

      var clusterSource = new ol.source.Cluster({
        distance: parseInt(distance.value, 10),
        source: source
      });

        var styleCache = {};
        var clusters = new ol.layer.Vector({
        source: clusterSource,
        style: function(feature) {
          var size = feature.get('features').length;
          var style = styleCache[size];
          if (!style) {
              style = new ol.style.Style({
                  image: new ol.style.Circle({
                radius: 10,
                stroke: new ol.style.Stroke({
                  color: '#fff'
                }),
                fill: new ol.style.Fill({
                  color: '#3399CC'
                })
              }),
              text: new ol.style.Text({
                text: size.toString(),
                fill: new ol.style.Fill({
                  color: '#fff'
                })
              })
            });
            styleCache[size] = style;
          }
          return style;
        }
      });

      var raster = new ol.layer.Tile({
        source: new ol.source.OSM()
      });

      var map = new ol.Map({
        layers: [raster, clusters],
        target: 'map',
        view: new ol.View({
            center: ol.proj.fromLonLat([19.938618, 50.060601]),
          zoom: 12
        })
      });

      distance.addEventListener('input', function() {
        clusterSource.setDistance(parseInt(distance.value, 10));
        });
</script>

