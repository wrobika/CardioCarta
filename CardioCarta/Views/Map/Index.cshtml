
@{
    ViewBag.Title = "Map";
}
<div id="map" class="map"></div>
    <form>
      <label>cluster distance</label>
      <input id="distance" type="range" min="0" max="100" step="1" value="40"/>
    </form>
    <script>
        @{
            var mapController = new CardioCarta.Controllers.MapController();
            var diary = mapController.GetDiaries();
            var airly = mapController.GetAirly();
        }

        var diaries = @Html.Raw(Json.Encode(diary));
        var airlies = @Html.Raw(Json.Encode(airly));
        var diaryPoints = Object.keys(diaries);
        var airlyPoints = Object.keys(airlies);
        var distance = document.getElementById('distance');
        var wktReader = new ol.format.WKT();
        var diaryFeatures = [];
        var airlyFeatures = [];

        for (var i = 0; i < diaryPoints.length; i++) {
            var feature = wktReader.readFeature(diaryPoints[i]);
            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
            var value = diaries[diaryPoints[i]];
            if (value <= 1) {
                feature.setStyle(new ol.style.Style(
                    {
                        image: new ol.style.Circle({
                            radius: 10,
                            stroke: new ol.style.Stroke({
                                color: '#fff'
                            }),
                            fill: new ol.style.Fill({
                                color: 'red'
                            })
                        })
                    }));
            }
            else
            {
                feature.setStyle(new ol.style.Style(
                    {
                        image: new ol.style.Circle({
                            radius: 10,
                            stroke: new ol.style.Stroke({
                                color: '#fff'
                            }),
                            fill: new ol.style.Fill({
                                color: 'green'
                            })
                        })
                    }));
            }
            diaryFeatures.push(feature);
        }

        for (var i = 0; i < airlyPoints.length; i++) {
            var feature = wktReader.readFeature(airlyPoints[i]);
            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857');
            var value = airlies[airlyPoints[i]];
            feature.set('weight', value / 100);

            //feature.setStyle(new ol.style.Style(
            //    {
            //        image: new ol.style.Circle({
            //            radius: 20,
            //            fill: new ol.style.Fill({
            //                color: 'rgba(255, 0, 0, 0.2)'
            //            })
            //        })
            //    }));

            airlyFeatures.push(feature);
        }

        var diarySource = new ol.source.Vector({
            features: diaryFeatures
        });

        var airlySource = new ol.source.Vector({
            features: airlyFeatures
        });

        var clusterDiary = new ol.source.Cluster({
            distance: parseInt(distance.value, 10),
            source: diarySource
        });

        var clusterAirly = new ol.source.Cluster({
            distance: 80,
            source: airlySource
        });

        var clusters = new ol.layer.Vector({
            source: clusterDiary,
            style: function(feature) {
                var size = feature.get('features').length;
                if (size === 1)
                {
                    style = feature.get('features')[0].getStyle();
                }
                else
                {
                    style = new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 10,
                        stroke: new ol.style.Stroke({
                            color: 'black'
                        }),
                        fill: new ol.style.Fill({
                            color: 'white'
                        })
                    }),
                    text: new ol.style.Text({
                        text: size.toString(),
                        fill: new ol.style.Fill({
                            color: 'black'
                        })
                    })
                    });
                }
                return style;
            }
        });

        var raster = new ol.layer.Tile({
        source: new ol.source.OSM()
        });

        var heatMapLayer = new ol.layer.Heatmap({
            source: airlySource,
            blur: 1,
            radius: 10,
            opacity: 1,
            //weight: function (feature) {
            //    var size = feature.get('features').length;
            //    if (size === 1) {
            //        return feature.get('features')[0].get('weight');
            //    }
            //    else {
            //        var sumWeight = 0;
            //        for (var i = 0; i < size; i++)
            //        {
            //            sumWeight += feature.get('features')[i].get('weight');
            //        }
            //        return sumWeight / size;
            //    }
            //}
            //gradient: ['#0000ff', '#f00', '#f00', '#ff0', '#f00'],
        });

        var airly = new ol.layer.Vector({
            source: clusterAirly,
            style: function (feature) {
                var size = feature.get('features').length;
                if (size === 1) {
                    style = feature.get('features')[0].getStyle();
                }
                else {
                    style = new ol.style.Style({
                        image: new ol.style.Circle({
                            radius: 20,
                            fill: new ol.style.Fill({
                                color: 'rgba(255, 0, 0, 0.2)'
                            })
                        }),
                    });
                }
                return style;
            }
        });

        var map = new ol.Map({
            layers: [raster, clusters, heatMapLayer],
            target: 'map',
            view: new ol.View({
                center: ol.proj.fromLonLat([19.938618, 50.060601]),
                zoom: 12
            })
        });

        distance.addEventListener('input', function() {
            clusterDiary.setDistance(parseInt(distance.value, 10));
        });
</script>

